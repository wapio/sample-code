
buildscript {
  ext {
    springBootVersion = '2.1.7.RELEASE'
  }
  repositories {
    mavenCentral()
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
  }
}

plugins {
  id 'java'
  id 'maven'
  id 'eclipse'
  id 'org.springframework.boot' version '2.1.7.RELEASE'
}
apply plugin: 'io.spring.dependency-management'

sourceCompatibility = 11
targetCompatibility = 11

processResources.destinationDir = compileJava.destinationDir
compileJava {
    options.compilerArgs = ['-s', '.apt_generated']
    dependsOn processResources
}
configurations {
  domaGenRuntime
}
repositories {
  mavenLocal()
  mavenCentral()
  maven { url "http://repo.spring.io/libs-snapshot" }
  maven { url "http://repo.spring.io/milestone" }
  maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter'
  implementation 'org.springframework.boot:spring-boot-starter-test'
  implementation 'org.seasar.doma.boot:doma-spring-boot-starter:1.2.0-SNAPSHOT'
  implementation 'org.projectlombok:lombok:1.18.8'
  runtime files('libs/ojdbc8.jar')
  testImplementation 'junit:junit'
  domaGenRuntime 'org.seasar.doma:doma-gen:2.24.0'
  domaGenRuntime files('libs/ojdbc8.jar')
}


def daoPackagePath   = 'src/main/java/spring/doma/sample/dao'
def daoTempPath = 'temp/dao'
task gen {
  group = 'doma-gen'
  doLast {
    ant.taskdef(resource: 'domagentask.properties',
    classpath: configurations.domaGenRuntime.asPath)

    ant.gen(
            url: 'jdbc:oracle:thin:@//localhost:1521/ORCLPDB1',
            user: 'goma',
            password: 'password') {

              entityConfig(
                      packageName:'spring.doma.sample.entity',
                      encoding:'UTF-8'
                      )
              daoConfig(
                      packageName:'spring.doma.sample.dao',
                      encoding:'UTF-8')
              sqlConfig()
            }

    // 生成された Dao インターフェースを一時ディレクトリにコピーし、@ConfigAutowireable アノテーションを付加する
    copy() {
      from "${daoPackagePath}"
      into "${daoTempPath}"
      filter { line ->
        line.replaceAll('import org.seasar.doma.Dao;', "import org.seasar.doma.boot.ConfigAutowireable;\nimport org.seasar.doma.Dao;")
                .replaceAll('@Dao', '@Dao\n@ConfigAutowireable')
      }
    }

    // アノテーションを付加した Dao インターフェースを dao パッケージへ戻す
    copy() {
      from "${daoTempPath}"
      into "${daoPackagePath}"
    }

    // 一時ディレクトリを削除する
    delete "${daoTempPath}"
  }
}
